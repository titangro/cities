{"version":3,"sources":["constants/initialState.js","constants/types.js","reducers/root.js","store/configureStore.prod.js","store/configureStore.dev.js","reducers/loading.js","reducers/error.js","reducers/cities.js","store/configureStore.js","actions/loading.js","actions/error.js","actions/cities.js","components/CitiesList.js","components/Main.js","components/City.js","App.js","index.js"],"names":["error","loading","cities","city","app","ERROR","ERROR_DELETE","LOADED","LOADING","GET","SHOW","SHOW_DETAILS","store","rootReducer","combineReducers","state","initialState","type","types","action","salaries","scores","details","__PRODUCTION__","createStore","compose","applyMiddleware","thunk","window","devToolsExtension","f","createdStore","loaded","createError","dispatch","fetchCities","url","fetch","then","res","json","count","fetchCitiesSuccess","_embedded","err","fetchCity","data","_links","href","Promise","all","withRouter","apiRoot","history","citiesInput","useState","location","search","slice","split","queryCity","setQueryCity","useEffect","push","Container","InputGroup","className","FormControl","name","ref","node","placeholder","aria-label","aria-describedby","defaultValue","decodeURI","Append","Button","variant","onClick","value","length","ListGroup","map","index","cityId","pop","Item","key","to","matching_full_name","Main","City","as","full_name","active","latlon","latitude","longitude","population","toLocaleString","App","props","console","log","createBrowserHistory","basename","process","exact","path","component","children","match","params","defaultProps","connect","configureStore","initialReduxState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b99a6e05.chunk.js","sourcesContent":["export default {\r\n    error: null,\r\n    loading: false,\r\n    cities: [],\r\n    city: null\r\n}","export const app = {\r\n    ERROR: 'cities/app/error',\r\n    ERROR_DELETE: 'cities/app/error/delete',\r\n    LOADED: 'cities/app/loaded',\r\n    LOADING: 'cities/app/loading'\r\n}\r\n\r\nexport const cities = {\r\n    GET: 'cities/app/get',\r\n    SHOW: 'cities/app/show',\r\n    SHOW_DETAILS: 'cities/app/details'\r\n}","    \r\nimport { combineReducers } from 'redux';\r\n\r\nimport { error } from './error';\r\nimport { loading } from './loading';\r\nimport { cities, city } from './cities';\r\n\r\nconst rootReducer = combineReducers({\r\n    loading,\r\n    error,\r\n    cities,\r\n    city\r\n});\r\n\r\nexport default rootReducer;","import thunk from 'redux-thunk';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\n\r\nimport rootReducer from '../reducers/root';\r\n\r\nlet store;\r\nexport default function configureStore(initialState) {\r\n    if (store) {\r\n        return store;\r\n    }\r\n    store = createStore(\r\n        rootReducer, \r\n        initialState,\r\n        compose(\r\n            applyMiddleware(thunk),\r\n            typeof window !== 'undefined' && window.devToolsExtension\r\n                ? window.devToolsExtension()\r\n                : f => f\r\n        )\r\n    );\r\n    return store;\r\n}","import thunk from 'redux-thunk';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\n\r\nimport rootReducer from '../reducers/root';\r\n\r\nlet store;\r\nexport default initialState => {\r\n    if (store) {\r\n        return store;\r\n    }\r\n    const createdStore = createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(\r\n            applyMiddleware(thunk),\r\n            typeof window !== 'undefined' && window.devToolsExtension\r\n                ? window.devToolsExtension()\r\n                : f => f\r\n        )\r\n    );\r\n    store = createdStore;\r\n    return store;\r\n};","import initialState from '../constants/initialState';\r\nimport * as types from '../constants/types';\r\n\r\nexport function loading(state = initialState.loading, action) {\r\n    switch (action.type) {\r\n        case types.app.LOADING:\r\n            return true;\r\n        case types.app.LOADED:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n}","import initialState from '../constants/initialState';\r\nimport * as types from '../constants/types';\r\n\r\nexport function error(state = initialState.error, action) {\r\n    switch (action.type) {\r\n        case types.app.ERROR:\r\n            const { error } = action;\r\n            return error;\r\n        case types.app.ERROR_DELETE:\r\n            return null\r\n        default:\r\n            return state;\r\n    }\r\n}","import initialState from '../constants/initialState';\r\nimport * as types from '../constants/types';\r\n\r\nexport function cities(state = initialState.cities, action) {\r\n    switch (action.type) {\r\n        case types.cities.GET:\r\n            const { cities } = action;\r\n            return cities;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function city(state = initialState.city, action) {\r\n    switch (action.type) {\r\n        case types.cities.SHOW:\r\n            const { city, salaries, scores, details } = action;\r\n            return {...city, salaries, scores, details};\r\n        default:\r\n            return state;\r\n    }\r\n}","import { __PRODUCTION__ } from 'environs';\r\nimport prodStore from './configureStore.prod';\r\nimport devStore from './configureStore.dev';\r\nexport default (__PRODUCTION__ ? prodStore : devStore);","import * as types from '../constants/types';\r\n\r\nexport const loading = () => {\r\n    return {\r\n        type: types.app.LOADING\r\n    };\r\n}\r\n\r\nexport const loaded = () => {\r\n    return {\r\n        type: types.app.LOADED\r\n    };\r\n}","import * as types from '../constants/types';\r\n\r\nexport const createError = (error) => {\r\n    return dispatch => \r\n        dispatch({\r\n            type: types.app.ERROR,\r\n            error\r\n        })    \r\n}\r\n\r\nexport const deleteError = () => dispatch =>\r\n    dispatch({\r\n        type: types.app.ERROR_DELETE\r\n    })","import * as types from '../constants/types';\r\nimport { loading, loaded } from './loading';\r\nimport { createError, deleteError } from './error';\r\n\r\nexport const fetchCitiesSuccess = cities => dispatch => {\r\n        dispatch(loaded());\r\n        dispatch({\r\n            type: types.cities.GET,\r\n            cities\r\n        })\r\n    }\r\n\r\nexport const fetchCitySuccess = city => dispatch => {\r\n    if (city._links['city:urban_area']) {\r\n        const url = city._links['city:urban_area'].href;\r\n        Promise.all(\r\n            [\r\n                fetch(`${url}salaries/`)\r\n                    .then(res => res.json())\r\n                    .then(res => res),\r\n                fetch(`${url}scores/`)\r\n                    .then(res => res.json())\r\n                    .then(res => res),\r\n                fetch(`${url}details/`)\r\n                    .then(res => res.json())\r\n                    .then(res => res),\r\n            ]\r\n        )\r\n            .then(([salaries, scores, details]) => {\r\n                dispatch(loaded());\r\n                dispatch({\r\n                    type: types.cities.SHOW,\r\n                    city,\r\n                    salaries,\r\n                    scores,\r\n                    details\r\n                })\r\n            })\r\n    } else {\r\n        dispatch({\r\n            type: types.cities.SHOW,\r\n            city,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const fetchCities = (url) => {\r\n    return dispatch => {\r\n        dispatch(loading());\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(\r\n                cities => {\r\n                    if (cities.count) {\r\n                        dispatch(deleteError());\r\n                        dispatch(\r\n                            fetchCitiesSuccess(cities._embedded['city:search-results']\r\n                        ))\r\n                    } else {\r\n                        dispatch(createError('По данному запросу не найден ни 1 город'))\r\n                    }\r\n                },\r\n                err => dispatch(createError(err))\r\n            ) \r\n    }           \r\n}\r\n\r\nexport const fetchCity = (url) => {\r\n    return dispatch => {\r\n        dispatch(loading());\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(\r\n                data => dispatch(fetchCitySuccess(data)),\r\n                err => dispatch(createError(err))\r\n            ) \r\n    }           \r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport { InputGroup, FormControl, Button, Container, ListGroup } from 'react-bootstrap';\r\n\r\nconst CitiesList = ({cities, fetchCities, apiRoot, history, error}) => {\r\n\r\n    let citiesInput = null;\r\n\r\n    const [queryCity, setQueryCity] = useState(() => {\r\n        return history.location.search ? history.location.search.slice(1).split('=')[1] : '';\r\n    });  \r\n\r\n    useEffect(() => {\r\n        const url = `${apiRoot}cities/?search=${queryCity}`;\r\n        fetchCities(url);\r\n        history.push(`/list?search=${queryCity}`)\r\n    }, [queryCity]);\r\n\r\n    function handleQueryCities() {\r\n        setQueryCity(citiesInput.value);\r\n    }\r\n\r\n    return <Container>\r\n        <h1>Поиск городов</h1>\r\n        <InputGroup className=\"mb-3\">\r\n        <FormControl name=\"cities\" ref={node => citiesInput = node}\r\n            placeholder=\"Название города\"\r\n            aria-label=\"Название города\"\r\n            aria-describedby=\"basic-addon2\"\r\n            defaultValue={history.location.search ? decodeURI(history.location.search.slice(1).split('=')[1]) : ''}\r\n        />\r\n        <InputGroup.Append>\r\n            <Button variant=\"outline-secondary\" onClick={() => handleQueryCities()}>Получить список</Button>\r\n        </InputGroup.Append>\r\n        </InputGroup>\r\n        {cities.length && !error ?\r\n            <ListGroup>\r\n                <p>Найдено: {cities.length} городов</p>\r\n            {cities.map(\r\n                (city, index) => {\r\n                    const cityId = city._links['city:item'].href.slice(1, -1).split('/').pop().split(':').pop();\r\n                    return (\r\n                        <ListGroup.Item action key={index}>\r\n                            <Link to={`/search/${cityId}`}>\r\n                                {city.matching_full_name}\r\n                            </Link>\r\n                        </ListGroup.Item>  \r\n                    )\r\n                }\r\n            )}</ListGroup>\r\n        : error ? <p>{error}</p> : <p>Пока список городов пуст</p>}\r\n    </Container>\r\n}\r\n\r\nCitiesList.propTypes = {\r\n    cities: PropTypes.array.isRequired, \r\n    fetchCities: PropTypes.func.isRequired, \r\n    fetchCity: PropTypes.any.isRequired, \r\n    apiRoot: PropTypes.string.isRequired\r\n}\r\n\r\nexport default withRouter(CitiesList);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst Main = () => {\r\n    return <Container>\r\n        <h1>Добро пожаловать!</h1>         \r\n        <Link to='/list'>Перейти к поиску</Link>\r\n    </Container>\r\n}\r\n\r\nexport default Main;","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Container, ListGroup } from 'react-bootstrap';\r\n\r\nconst City = ({city, cityId, fetchCity, apiRoot}) => {\r\n    useEffect(() => {\r\n        const url = `${apiRoot}cities/geonameid:${cityId}`;\r\n        fetchCity(url);\r\n    }, [cityId]);\r\n\r\n    return city ? <Container>\r\n        <h1>{city.name}</h1>\r\n        <ListGroup as=\"ul\">\r\n            <ListGroup.Item as=\"li\">\r\n                Местонахождение: {city.full_name}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item as=\"li\" active>\r\n                Координаты: {city.location.latlon.latitude} {city.location.latlon.longitude}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item as=\"li\">\r\n                Morbi leo risus\r\n            </ListGroup.Item>\r\n            <ListGroup.Item as=\"li\" active>\r\n                Население: {city.population.toLocaleString('ru-RU')} человек\r\n            </ListGroup.Item>\r\n            <ListGroup.Item as=\"li\">\r\n                {city.salaries || city.scores || city.details ? 'Есть подробные данные'\r\n                    : 'Подробные данные отсутсвуют'\r\n                }\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    </Container> : ''\r\n}\r\n\r\nexport default City;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { fetchCities, fetchCity } from './actions/cities';\r\n\r\nimport CitiesList from './components/CitiesList';\r\nimport Main from './components/Main';\r\nimport City from './components/City';\r\n\r\nconst App = (props) => {  \r\n\r\n  console.log(props)\r\n\r\n  const history = createBrowserHistory({\r\n    basename: process.env.PUBLIC_URL\r\n  });\r\n\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <div className=\"wrapper\">        \r\n        <Switch>\r\n          <Route exact path=\"/\" component={Main} />\r\n          <Route path=\"/list\">\r\n            <CitiesList {...props} history={history} />                        \r\n          </Route>\r\n          <Route path=\"/search/:cityId\" children={\r\n            ({match}) => <City {...props} cityId={match.params.cityId} />} />\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      error: state.error,\r\n      loading: state.loading,\r\n      cities: state.cities,\r\n      city: state.city\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchCities: (url) => dispatch(fetchCities(url)),\r\n    fetchCity: (url) => dispatch(fetchCity(url)),\r\n  };\r\n};\r\n\r\nApp.defaultProps = {\r\n  apiRoot: 'https://api.teleport.org/api/'\r\n}\r\n\r\nApp.propTypes = {\r\n  children: PropTypes.node,\r\n  apiRoot: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from './store/configureStore';\r\nimport initialReduxState from './constants/initialState';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './css/normalize.css';\r\nimport './css/style.css';\r\n\r\nimport App from './App';\r\n\r\nconst store = configureStore(initialReduxState);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}